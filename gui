#!/bin/bash

DIRECTORY="$(readlink -f "$(dirname "$0")")"

function error {
  echo -e "\e[91m$1\e[39m"
  exit 1
}

check() {
  #python
  if ! command -v python &>/dev/null;then
    echo "Installing python..."
    sudo apt install -y python || error "Failed to install python!"
  fi
  
  #youtube-dl
  if ! command -v youtube-dl &>/dev/null || [ ! -z "$(youtube-dl -v 2>&1 | grep '2019')" ];then
    echo "Installing youtube-dl..."
    sudo wget https://yt-dl.org/downloads/latest/youtube-dl -O /usr/local/bin/youtube-dl || error "Failed to download youtube-dl!"
    sudo chmod a+rx /usr/local/bin/youtube-dl
    if [ ! -f /usr/local/bin/youtube-dl ];then
      error "youtube-dl should be downloaded now, but /usr/local/bin/youtube-dl does not exist!"
    fi
  fi
  
  #VLC youtube.lua
  if [ ! -f ~/.local/share/vlc/lua/playlist/youtube.lua ] || [ "$(sha256sum ~/.local/share/vlc/lua/playlist/youtube.lua | awk '{print $1}')" != "$(wget -qO- https://raw.githubusercontent.com/videolan/vlc/master/share/lua/playlist/youtube.lua | sha256sum | awk '{print $1}')" ];then
    echo "Updating VLC youtube.lua..."
    mkdir -p ~/.local/share/vlc/lua/playlist
    wget https://raw.githubusercontent.com/videolan/vlc/master/share/lua/playlist/youtube.lua -O ~/.local/share/vlc/lua/playlist/youtube.lua
    if [ ! -f ~/.local/share/vlc/lua/playlist/youtube.lua ] || [ "$(sha256sum ~/.local/share/vlc/lua/playlist/youtube.lua | awk '{print $1}')" != "$(wget -qO- https://raw.githubusercontent.com/videolan/vlc/master/share/lua/playlist/youtube.lua | sha256sum | awk '{print $1}')" ];then
      error "VLC youtube.lua failed to be updated!"
    fi
  fi
  
  #YAD
  if ! command -v yad &>/dev/null;then
    echo "Installing YAD..."
    sudo apt install -y yad || error "Failed to install yad!"
  fi
  
  #jq
  if ! command -v jq &>/dev/null;then
    echo "Installing jq..."
    sudo apt install -y jq || error "Failed to install jq!"
  fi
  
  if ! command -v mogrify &>/dev/null;then
    echo "Installing imagemagick..."
    sudo apt install -y imagemagick || error "Failed to install imagemagick!"
  fi
  sudo rm /usr/share/applications/display-im6.q16.desktop &>/dev/null
  
  mkdir -p "${DIRECTORY}/thumbnails" "${DIRECTORY}/data" ~/.local/share/applications
  
  echo "[Desktop Entry]
Version=1.0
Name=YouTubuddy
GenericName=YouTube Browser
Comment=Search/Watch/Download YouTube videos without a browser
Exec=$0
Terminal=false
Type=Application
Icon=${DIRECTORY}/icons/logo.png
Categories=Network;WebBrowser;
StartupNotify=true" > ~/.local/share/applications/youtubuddy.desktop
}
if [ ! -e "${DIRECTORY}/data" ] || [ ! -e ~/.local/share/applications/youtubuddy.desktop ];then
  check
else
  check &
fi

#check for updates and auto-update if the no-update files does not exist
if [ ! -f "${DIRECTORY}/no-update" ];then
  cd "$DIRECTORY"
  localhash="$(git rev-parse HEAD)"
  latesthash="$(git ls-remote https://github.com/Botspot/youtubuddy HEAD | awk '{print $1}')"
  if [ "$localhash" != "$latesthash" ] && [ ! -z "$latesthash" ] && [ ! -z "$localhash" ];then
    echo "YouTubuddy is out of date. Downloading new version..."
    rm -rf "$DIRECTORY.old" &>/dev/null
    mv -f "$DIRECTORY" "$DIRECTORY.old"
    git clone "https://github.com/Botspot/youtubuddy" "$DIRECTORY"
    cp -af "$DIRECTORY.old/data"/. "$DIRECTORY/data"
    gio trash "$DIRECTORY.old"
    bash -c "$0" &
    exit 0
  fi
  cd $HOME
fi

#remove old thumbnails
find "${DIRECTORY}/thumbnails"/* -mtime +1 -exec rm {} \; &>/dev/null &

#you can run this script with a search argument to search for.
search="$1"

#main while loop. If search results window is closed, this takes you back to the start.
while true;do
  #searching while loop. It stays here until a search is made.
  while [ -z "$(echo "$search" | grep . | grep -v ' ')" ];do
    search="$(yad --image="${DIRECTORY}/icons/logo-long.png" --form --image-on-top \
      --title="YouTubuddy: Search" --window-icon="${DIRECTORY}/icons/logo.png" \
      --separator='\n' \
      --center --height=150 --width=400 \
      --field='Search YouTube:' "$(cat "${DIRECTORY}/data/lastsearch" 2>/dev/null)" \
      "$add" \
      --button=Options!"${DIRECTORY}/icons/tool.png":2 \
      --button=!"${DIRECTORY}/icons/search.png":0)"
    button=$?
    if [ $button == 0 ];then
      #search
      if [ -z "$search" ];then
        echo "empty search"
        search=''
        add="--field=Really? Come on. You have to search for something. ;):LBL"
      fi
    elif [ $button == 2 ];then
      search=''
      #options
      
      options="${DIRECTORY}/data/options/thumbnail-size
${DIRECTORY}/data/options/multi-select
${DIRECTORY}/data/options/num-results
${DIRECTORY}/data/options/ytdl-args
${DIRECTORY}/data/options/dl-location
${DIRECTORY}/data/options/vlc-cmd
${DIRECTORY}/data/options/vlc-args"
      
      output="$(yad --image="${DIRECTORY}/icons/logo-short.png" --form --image-on-top \
        --title="YouTubuddy: Options" --window-icon="${DIRECTORY}/icons/logo.png" \
        --separator='\n' --text="Options" \
        --center --height=150 --width=400 \
        --field='Thumbnail size:':NUM "$(cat "$(echo "$options" | sed -n 1p)")"!0..5 \
        --field='Allow multiple videos to be selected':CHK "$(cat "$(echo "$options" | sed -n 2p)")" \
        --field='# of results:':NUM "$(cat "$(echo "$options" | sed -n 3p)")"!10..1000!10 \
        --field='Youtube-dl args:la' "​$(cat "$(echo "$options" | sed -n 4p)")" \
        --field='Videos saved to:':DIR "$(cat "$(echo "$options" | sed -n 5p)")" \
        --field='VLC command:' "​$(cat "$(echo "$options" | sed -n 6p)")" \
        --field='VLC args:' "​$(cat "$(echo "$options" | sed -n 7p)")" \
        --button=Done!"${DIRECTORY}/icons/check.png":0)"
      button=$?
      if [ $button == 0 ];then
        #save settings if check-mark clicked
        
        #remove zero-width spaces from output
        output="$(echo "$output" | sed 's/​//g')"
        
        echo "output: ${output}EOO"
        
        #remove all thumbnails if thumbnail size changed
        if [ "$(cat "$(echo "$options" | sed -n 1p)")" != "$(echo "$output" | sed -n 1p)" ];then
          echo "Thumbnail size changed. Deleting all thumbnails..."
          rm -rf "${DIRECTORY}/thumbnails"/*
        fi
        #save changes
        for i in $(seq $(echo "$options" | wc -l)) ;do
          echo "$output" | sed -n ${i}p > "$(echo "$options" | sed -n ${i}p)"
          echo "Setting $(echo "$options" | sed -n ${i}p) to $(echo "$output" | sed -n ${i}p)"
        done
        
      fi
    #end of settings code
    else
      error "user exited"
    fi
  done
  #end of searching while loop
  
  echo "$search" > "${DIRECTORY}/data/lastsearch"
  rm -f "${DIRECTORY}/data/lastjson"
  
  if [[ "$search" == *'youtube.com/watch?v='* ]] || [[ "$search" == *youtu.be/* ]];then
    #url single-video mode
    loadtext="Finding your YouTube URL..."
    windowtitle="YouTubuddy: YouTube URL"
    #this searches for videos as a background process
    youtube-dl --print-json "$search" >> "${DIRECTORY}/data/lastjson" &
    ytdlpid=$!
  elif [[ "$search" == *'youtube.com/playlist?list='* ]];then
    #playlist-url mode
    loadtext="Finding your playlist..."
    windowtitle="YouTubuddy: Playlist"
    #this searches for videos as a background process
    youtube-dl --print-json "$search" >> "${DIRECTORY}/data/lastjson" &
    ytdlpid=$!
  elif [[ "$search" == 'http'*'://'* ]];then
    #playlist-url mode
    loadtext="Finding your URL..."
    windowtitle="YouTubuddy: Video URL"
    #this searches for videos as a background process
    youtube-dl --print-json "$search" >> "${DIRECTORY}/data/lastjson" &
    ytdlpid=$!
  else
    #search mode
    numresults=$(cat "${DIRECTORY}/data/options/num-results")
    loadtext="Searching for videos..."
    windowtitle="YouTubuddy: Results for "\""$search"\"""
    #this searches for videos as a background process
    youtube-dl -s --print-json "ytsearch${numresults}:${search}" >> "${DIRECTORY}/data/lastjson" &
    ytdlpid=$!
  fi
  
  #kill youtube-dl background process on exit
  trap "kill $ytdlpid" EXIT
  
  #display loading dialog
  (echo "# "
  sleep 20
  echo "# This should not be taking so long."
  sleep 20
  echo "# Something is wrong."
  sleep infinity) | yad --progress --pulsate --title="YouTubuddy: Searching" \
    --image="${DIRECTORY}/icons/logo-short.png" --image-on-top \
    --text="$loadtext" --window-icon="${DIRECTORY}/icons/logo.png" \
    --width=400 --height=150 --center --auto-close --auto-kill \
    --no-buttons 2>/dev/null &
  loader=$!
  
  #waits until the first result is inserted in the file
  while [ -z "$(cat "${DIRECTORY}/data/lastjson")" ];do
    sleep 1
  done
  
  kill $loader
  
  #determine the thumbnail size
  thumbsize="$(cat ${DIRECTORY}/data/options/thumbnail-size)"
  if [ -z "$thumbsize" ];then
    thumbsize=3
  elif [ "$thumbsize" == 0 ];then
    thumbsize=''
  else
    thumbsize=$((thumbsize-1))
  fi
  #determine if multi-select is enabled
  multiselect="$(cat "${DIRECTORY}/data/options/multi-select")"
  
  #search results while loop. Returns you to the search results after you click a play/download button
  while true;do
    i=0
    output="$(
    while true;do
      i=$((i+1))
      if ps -p $ytdlpid > /dev/null || [ $i -le "$(wc -l "${DIRECTORY}/data/lastjson" | awk '{print $1}')" ]; then
        result=''
        while [ -z "$result" ];do
          result="$(cat "${DIRECTORY}/data/lastjson" 2>/dev/null | sed -n "${i}p")"
        done
        
        result="$(echo "$result" | grep -E '"url":|height|upload_date|"webpage_url":|fulltitle|fps|"ext":|duration|like_count' )"
        
        id="$(echo "$result" | jq '.id' | head -n1 | tr -d '"')"
        
        title="$(echo "$result" | jq '.fulltitle' | head -n1 | tr -d '"' | sed 's/&/&amp;/g')"
        
        date="$(echo "$result" | jq '.upload_date' | head -n1 | tr -d '"' | date -d $(cat /dev/stdin) +%Y/%m/%d)"
        
        #get the link to the thumbnail image for the video. Image size is determined by the [3] string. From 0 (smallest) to 4 (largest)
        if [ ! -z $thumbsize ];then
          imageurl="$(echo "$result" | jq '.thumbnails' | jq ".[$thumbsize].url" | tr -d '"')"
          if [ ! -f "${DIRECTORY}/thumbnails/${id}.png" ];then
            image="${DIRECTORY}/thumbnails/${id}.webm"
            wget "$imageurl" -O "$image"
            mogrify -format png "$image"
            rm "$image"
          fi
          image="${DIRECTORY}/thumbnails/${id}.png"
          image="$(echo "$image" | sed 's/&/&amp;/g')"
        fi
        
        url="$(echo "$result" | jq '.webpage_url' | tr -d '"')"
        urlnice="$(echo "youtu.be/${id}" | sed 's/&/&amp;/g')"
        
        #highest video quality available. For example: "1080p60"
        quality="$(echo "$result" | jq '.height' | head -n1)p$(echo "$result" | jq '.fps' | head -n1 | tr -d '"')"
        likes="$(echo "$result" | jq '.like_count' | sed -n '1p')"
        dislikes="$(echo "$result" | jq '.dislike_count' | sed -n '1p')"
        channel="$(echo "$result" | jq '.uploader' | sed -n '1p' | tr -d '"' | sed 's/&/&amp;/g')"
        
        echo -e "FALSE
$url
$urlnice - $channel on $date
$image
$title"
        
        sleep 0.5
      else
        #if all results are in, stop the file-checking loop.
        echo "FALSE


${DIRECTORY}/icons/blank.png
End of results."
        exit 0
      fi
    done | tee /dev/stderr | yad --list $([ "$multiselect" == TRUE ] && echo '--checklist') --text="Select some videos!" \
      --image="${DIRECTORY}/icons/logo-long.png" --image-on-top --no-headers --no-click \
      --title="$windowtitle" --window-icon="${DIRECTORY}/icons/logo.png" \
      --maximized \
      $([ "$multiselect" == TRUE ] && echo '--column=:CHK' || echo '--column=:HD') --column=url:HD --column=tooltip:HD $([ ! -z "$thumbsize" ] && echo '--column=:IMG' || echo '--column=:HD') --column=title --print-column=2 --tooltip-column=3 --separator=' ' \
      --button=URLs!"${DIRECTORY}/icons/link.png":4 \
      --button=Play!"${DIRECTORY}/icons/play.png":2 \
      --button=Download!"${DIRECTORY}/icons/download.png":0
      )"
    button=$?
    
    #go back to the starting page if play/download is not clicked
    if [ $button != 0 ] && [ $button != 2 ] && [ $button != 4 ];then
      search=''
      kill $ytdlpid
      break #exit the search results while loop
    fi
    
    #if at least 1 video selected 
    if [ ! -z "$output" ];then
      genarray() {
        playlist=()
        
        PREIFS="$IFS"
        IFS=$'\n'
        for video in $output ;do
          playlist+=( "$video" )
        done
        IFS="$PREIFS"
      }
      if [ $button == 4 ];then
        echo "$output" | grep . | yad --text-info \
          --center --width=500 --height=250 --title='URLs to copy' \
          --window-icon="${DIRECTORY}/icons/logo.png" \
          --button=Close:0
      elif [ $button == 2 ];then
        #play
        genarray
        $(cat "${DIRECTORY}/data/options/vlc-cmd") ${playlist[*]} $(cat "${DIRECTORY}/data/options/vlc-args") &
      elif [ $button == 0 ];then
        #download
        genarray
        numvideos=$(echo "$output" | tr ' ' '\n' | grep . | wc -l)
        if [ $numvideos == 1 ];then
          plural='video'
        else
          plural='videos'
        fi
        "${DIRECTORY}/terminal-run" "trap 'echo "\""closing in 10 seconds..."\"" ; sleep 10' EXIT
          cd $(cat "${DIRECTORY}/data/options/dl-location")
          youtube-dl ${playlist[*]} $(cat "${DIRECTORY}/data/options/ytdl-args")" "Downloading $numvideos $plural to $(cat "${DIRECTORY}/data/options/dl-location")..." &
      fi
    fi
    
    
  done
  #end of search results while loop
done
#end of main while loop
